/*!********************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[3]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[4]!./src/scss/hbkcolissimochrono.scss ***!
  \********************************************************************************************************************************************************************************************************************************************************************************************************************************/
@charset "UTF-8";
/*------------------------------------
  Wbu-Atomique variables
------------------------------------*/
/*------------------------------------
  COLORS
------------------------------------*/
/*------------------------------------
  BORDURES
------------------------------------*/
/*------------------------------------
  TYPOGRAPHY
 il ya une erreur de logique dans la definition des sous taille de police.
 elles ne sont pas proportionnelle à la taille parente.
------------------------------------*/
/* */
/* Page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * version 1 : Juin 2023
 * pour voir les stats d'utilisation en fonction de la taille des ecrans : https://gs.statcounter.com/screen-resolution-stats/mobile/worldwide
 */
/**
 * version 0.
 * Remove before 2x
 * @depreciated value.
 */
/**
 *  Breack point hero.
 */
/**
 *  Breack point h1.
 */
/**
 *  Breack point h2.
 */
/**
 *  Breack point h3.
 */
/**
 *  Breack point h4.
 */
/**
 *  Breack point h5.
 */
/**
 *  Breack point h6.
 */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* Translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour à la ligne
 */
/**
 *  Mixin for multiline limit text css
 * @depreciated move before 2x, 
 * @use ellipseText
 */
/**
 * Permet de definir le nombre de ligne max a afficher
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**
 * On a un bug avec la fonction color-yiq à partir de la version bootstrap5, 
 * border-color: rgba(color-yiq($wbu-background), 20%); ne fonctionne pas.
 * ( raison cette fonction est repressier , il faut utiliser color-contrast() ).
 */
.hbkcolissimochrono_pickup {
  position: fixed;
  left: 0;
  bottom: 0;
  top: 0;
  right: 0;
  opacity: 0;
  display: flex;
  align-items: center;
  visibility: hidden;
  transition-property: all;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
}
.hbkcolissimochrono_pickup > .content {
  display: flex;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
}
.hbkcolissimochrono_pickup .widget-pickup {
  width: 100%;
  height: 100%;
  min-width: 300px;
  min-height: 300px;
  max-width: 1000px;
  max-height: calc(100vh - 100px);
  overflow: auto;
}
.hbkcolissimochrono_pickup .overlay {
  position: absolute;
  background-color: rgba(51, 51, 51, 0.8);
  left: 0;
  right: 0;
  height: 100%;
  min-height: 100vh;
  top: 0;
  z-index: 1;
}
.hbkcolissimochrono_pickup .block-title {
  position: absolute;
  top: 0;
  left: -50%;
  transform: translate(50%, 15px);
}
.hbkcolissimochrono_pickup .hbk__container {
  transform: translateY(-10%);
  opacity: 0;
  overflow: auto;
  display: flex;
  justify-content: center;
  overflow: hidden;
  transition-property: all;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
  max-height: 100%;
  width: 100%;
  position: relative;
  z-index: 2;
}
.hbkcolissimochrono_pickup .hbk__container .hbk_content {
  position: relative;
  z-index: 2;
  border-radius: 5px;
  background: #fff;
  padding: 10px 0;
  margin: 40px 5px;
  height: 100%;
  width: 100%;
}
@media only screen and (min-width: 992px) {
  .hbkcolissimochrono_pickup .hbk__container .hbk_content {
    padding: 20px;
    margin: 60px 0;
    width: auto;
  }
}
.hbkcolissimochrono_pickup .hbk__container .svg-close {
  position: absolute;
  border-radius: 50%;
  padding: 4px;
  width: 30px;
  height: 30px;
  background: #fff;
  fill: #000;
  border: 1px solid #555;
  left: auto;
  right: 0;
  bottom: auto;
  top: -34px;
  transition-property: all;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
  cursor: pointer;
}
@media only screen and (min-width: 992px) {
  .hbkcolissimochrono_pickup .hbk__container .svg-close {
    right: -40px;
    top: -40px;
    padding: 8px;
    width: 40px;
    height: 40px;
  }
}
.hbkcolissimochrono_pickup .hbk__container .svg-close:hover {
  background: #f00;
  fill: #fff;
}
.hbkcolissimochrono_pickup.open {
  z-index: 9999;
  opacity: 1;
  visibility: visible;
}
.hbkcolissimochrono_pickup.open .hbk__container {
  opacity: 1;
  transform: translateY(0);
  height: 100%;
}
@media only screen and (min-width: 769px) {
  .hbkcolissimochrono_pickup.open .hbk__container {
    height: auto;
  }
}

body.modal-open {
  overflow: hidden;
}
/*!******************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[1].use[1]!./node_modules/postcss-loader/dist/cjs.js??ruleSet[1].rules[1].use[2]!./node_modules/resolve-url-loader/index.js??ruleSet[1].rules[1].use[3]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[1].use[4]!./src/scss/edit.scss ***!
  \******************************************************************************************************************************************************************************************************************************************************************************************************************/
@charset "UTF-8";
/*------------------------------------
  Wbu-Atomique variables
------------------------------------*/
/*------------------------------------
  COLORS
------------------------------------*/
/*------------------------------------
  BORDURES
------------------------------------*/
/*------------------------------------
  TYPOGRAPHY
 il ya une erreur de logique dans la definition des sous taille de police.
 elles ne sont pas proportionnelle à la taille parente.
------------------------------------*/
/* */
/* Page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * version 1 : Juin 2023
 * pour voir les stats d'utilisation en fonction de la taille des ecrans : https://gs.statcounter.com/screen-resolution-stats/mobile/worldwide
 */
/**
 * version 0.
 * Remove before 2x
 * @depreciated value.
 */
/**
 *  Breack point hero.
 */
/**
 *  Breack point h1.
 */
/**
 *  Breack point h2.
 */
/**
 *  Breack point h3.
 */
/**
 *  Breack point h4.
 */
/**
 *  Breack point h5.
 */
/**
 *  Breack point h6.
 */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* Translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour à la ligne
 */
/**
 *  Mixin for multiline limit text css
 * @depreciated move before 2x, 
 * @use ellipseText
 */
/**
 * Permet de definir le nombre de ligne max a afficher
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**
 * On a un bug avec la fonction color-yiq à partir de la version bootstrap5, 
 * border-color: rgba(color-yiq($wbu-background), 20%); ne fonctionne pas.
 * ( raison cette fonction est repressier , il faut utiliser color-contrast() ).
 */
.hbkcolissimochrono-pickup-edit {
  font-size: 80%;
  position: relative;
  padding: 0.7rem;
  border: 1px solid #f79839;
  border-left-width: 3px;
  overflow: hidden;
}
.hbkcolissimochrono-pickup-edit .pickup-html {
  position: relative;
  z-index: 1;
}
.hbkcolissimochrono-pickup-edit .pickup-html::before {
  background-image: url("https://www.colissimo.entreprise.laposte.fr/sites/default/files/2021-03/Cube_cartographie_points_retraits_60px.png");
  content: "";
  display: block;
  position: absolute;
  left: 0;
  height: 100%;
  bottom: 0;
  top: 0;
  right: 0;
  z-index: -1;
  opacity: 0.3;
  background-repeat: no-repeat;
  background-position: 90% center;
  background-size: auto 50%;
  transition-property: all;
  transition-duration: 0.3s;
  transition-timing-function: ease-in-out;
}
.hbkcolissimochrono-pickup-edit .hbkcolissimochrono-pickup-button {
  position: absolute;
  left: 0;
  height: 100%;
  bottom: 0;
  top: 0;
  right: 0;
  text-indent: 900px;
}
.hbkcolissimochrono-pickup-edit:hover .pickup-html::before {
  opacity: 1;
  background-size: auto 60%;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vY3NzL2hia2NvbGlzc2ltb2Nocm9uby5jc3MiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0JBQWdCO0FDQWhCOztxQ0FBQTtBQUlBOztxQ0FBQTtBQTRCQTs7cUNBQUE7QUFZQTs7OztxQ0FBQTtBQW1EQTtBQVFBO0FBRUE7QUN6R0E7OztFQUFBO0FBZ0RBOzs7O0VBQUE7QUM3Q0E7O0VBQUE7QUFtQ0E7O0VBQUE7QUFhQTs7RUFBQTtBQVVBOztFQUFBO0FBVUE7O0VBQUE7QUFVQTs7RUFBQTtBQU9BOztFQUFBO0FDeEZBOztFQUFBO0FBeUJBOzs7RUFBQTtBQWlCQTs7RUFBQTtBQW9FQTs7RUFBQTtBQThCQTs7Q0FBQTtBQVFBOztDQUFBO0FBbUJBOztDQUFBO0FBbUJBOztFQUFBO0FBVUE7Ozs7RUFBQTtBQTJDQTs7RUFBQTtBQWlFQTs7RUFBQTtBQTBCQTs7O0VBQUE7QUF3QkE7O0VBQUE7QUFpQkE7O0VBQUE7QUEyREE7O0VBQUE7QUN0YUE7Ozs7RUFBQTtBTExBO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VJb0lBLHdCQUQrQjtFQUUvQix5QkFGNEM7RUFHNUMsdUNBSDBEO0FKNUI1RDtBQXBHRTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFzR0o7QUFwR0U7RUFDRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBQXNHSjtBQW5HRTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBRUE7RUFDQTtFQUNBO0VBQ0E7QUFvR0o7QUFsR0U7RUFDRTtFQUNBO0VBQ0E7RUFDQTtBQW9HSjtBQWxHRTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFSXlGRix3QkFEK0I7RUFFL0IseUJBRjRDO0VBRzVDLHVDQUgwRDtFSnJGeEQ7RUFDQTtFQWdCQTtFQUNBO0FBc0ZKO0FBdEdJO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtBQXdHTjtBRTdFSTtFRm5DQTtJQVVJLGFBcEVLO0lBcUVMO0lBQ0E7RUEwR047QUFDRjtBQXRHSTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFSXVESix3QkFEK0I7RUFFL0IseUJBRjRDO0VBRzVDLHVDQUgwRDtFSnpDdEQ7QUErRk47QUV0R0k7RUZsQkE7SUFlSTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0VBNkdOO0FBQ0Y7QUE1R007RUFDRTtFQUNBO0FBOEdSO0FBekdFO0VBQ0U7RUFDQTtFQUNBO0FBMkdKO0FBMUdJO0VBQ0U7RUFDQTtFQUNBO0FBNEdOO0FFaklJO0VGa0JBO0lBS0k7RUE4R047QUFDRjs7QUExR0E7RUFDRTtBQTZHRixDOzs7O0FNck9BLGdCQUFnQjtBTEFoQjs7cUNBQUE7QUFJQTs7cUNBQUE7QUE0QkE7O3FDQUFBO0FBWUE7Ozs7cUNBQUE7QUFtREE7QUFRQTtBQUVBO0FDekdBOzs7RUFBQTtBQWdEQTs7OztFQUFBO0FDN0NBOztFQUFBO0FBbUNBOztFQUFBO0FBYUE7O0VBQUE7QUFVQTs7RUFBQTtBQVVBOztFQUFBO0FBVUE7O0VBQUE7QUFPQTs7RUFBQTtBQ3hGQTs7RUFBQTtBQXlCQTs7O0VBQUE7QUFpQkE7O0VBQUE7QUFvRUE7O0VBQUE7QUE4QkE7O0NBQUE7QUFRQTs7Q0FBQTtBQW1CQTs7Q0FBQTtBQW1CQTs7RUFBQTtBQVVBOzs7O0VBQUE7QUEyQ0E7O0VBQUE7QUFpRUE7O0VBQUE7QUEwQkE7OztFQUFBO0FBd0JBOztFQUFBO0FBaUJBOztFQUFBO0FBMkRBOztFQUFBO0FDdGFBOzs7O0VBQUE7QUNMQTtFQUNFO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFJQTtBQWlHRjtBQWhHRTtFQUNFO0VBQ0E7QUFrR0o7QUFqR0k7RUFDRTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VGa0hKLHdCQUQrQjtFQUUvQix5QkFGNEM7RUFHNUMsdUNBSDBEO0FFWDVEO0FBbEdFO0VBQ0U7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7QUFvR0o7QUFqR0k7RUFDRTtFQUNBO0FBbUdOLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Ac3RlcGhhbmU4ODgvd2J1LWF0b21pcXVlLXRoZW1lLy4vc3JjL3Njc3MvaGJrY29saXNzaW1vY2hyb25vLnNjc3MiLCJ3ZWJwYWNrOi8vQHN0ZXBoYW5lODg4L3didS1hdG9taXF1ZS10aGVtZS8uLi8uLi8uLi9BcHBWdWVqcy93YnUtYXRvbWlxdWUvc2Nzcy9fdmFyaWFibGVzLnNjc3MiLCJ3ZWJwYWNrOi8vQHN0ZXBoYW5lODg4L3didS1hdG9taXF1ZS10aGVtZS8uLi8uLi8uLi9BcHBWdWVqcy93YnUtYXRvbWlxdWUvc2Nzcy9kZWZhdXQvbW9kZWwvY3VzdG9tX2JwLnNjc3MiLCJ3ZWJwYWNrOi8vQHN0ZXBoYW5lODg4L3didS1hdG9taXF1ZS10aGVtZS8uLi8uLi8uLi9BcHBWdWVqcy93YnUtYXRvbWlxdWUvc2Nzcy9kZWZhdXQvbWl4aW5zL3R5cG9ncmFwaHkuc2NzcyIsIndlYnBhY2s6Ly9Ac3RlcGhhbmU4ODgvd2J1LWF0b21pcXVlLXRoZW1lLy4uLy4uLy4uL0FwcFZ1ZWpzL3didS1hdG9taXF1ZS9zY3NzL2RlZmF1dC9taXhpbnMvY29tcG9uZW50cy5zY3NzIiwid2VicGFjazovL0BzdGVwaGFuZTg4OC93YnUtYXRvbWlxdWUtdGhlbWUvLi4vLi4vLi4vQXBwVnVlanMvd2J1LWF0b21pcXVlL3Njc3Mvd2J1LXJlc3NvdXJjZXMtY2xlYW4uc2NzcyIsIndlYnBhY2s6Ly9Ac3RlcGhhbmU4ODgvd2J1LWF0b21pcXVlLXRoZW1lLy4vc3JjL3Njc3MvZWRpdC5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIkB1c2UgXCJAc3RlcGhhbmU4ODgvd2J1LWF0b21pcXVlL3Njc3Mvd2J1LXJlc3NvdXJjZXMtY2xlYW4uc2Nzc1wiIGFzICo7XG4vLyBPbiBzdXJjaGFyZ2UgbGVzIHZhbGV1cnMgcmVtcHMgZW4gcHggYWZpbiBkJ2V2aXRlciBkZSBtYXV2YWlzZSBzdXBwcmlzZS5cbiR3YnUtbWFyZ2luOiAyMHB4O1xuLmhia2NvbGlzc2ltb2Nocm9ub19waWNrdXAge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIGxlZnQ6IDA7XG4gIGJvdHRvbTogMDtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgb3BhY2l0eTogMDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xuXG4gIEBpbmNsdWRlIFdCVXRyYW5zaXRpb24oKTtcbiAgPiAuY29udGVudCB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgfVxuICAud2lkZ2V0LXBpY2t1cCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIG1pbi13aWR0aDogMzAwcHg7XG4gICAgbWluLWhlaWdodDogMzAwcHg7XG4gICAgbWF4LXdpZHRoOiAxMDAwcHg7XG4gICAgbWF4LWhlaWdodDogY2FsYygxMDB2aCAtIDEwMHB4KTtcbiAgICBvdmVyZmxvdzogYXV0bztcbiAgfVxuICAvLyB6LWluZGV4OiAtOTtcbiAgLm92ZXJsYXkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKCRjb2xvcjogIzMzMywgJGFscGhhOiA4MCUpO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgLy8gYm90dG9tOiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgICB0b3A6IDA7XG4gICAgei1pbmRleDogMTtcbiAgfVxuICAuYmxvY2stdGl0bGUge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogLTUwJTtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSg1MCUsIDE1cHgpO1xuICB9XG4gIC5oYmtfX2NvbnRhaW5lciB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMCUpO1xuICAgIG9wYWNpdHk6IDA7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIC8vIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgQGluY2x1ZGUgV0JVdHJhbnNpdGlvbigpO1xuICAgIG1heC1oZWlnaHQ6IDEwMCU7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgLmhia19jb250ZW50IHtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHotaW5kZXg6IDI7XG4gICAgICBib3JkZXItcmFkaXVzOiAkd2J1LW1hcmdpbiAqIDAuMjU7XG4gICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgcGFkZGluZzogJHdidS1tYXJnaW4gKiAwLjUgMDtcbiAgICAgIG1hcmdpbjogJHdidS1tYXJnaW4gKiAyICR3YnUtbWFyZ2luICogMC4yNTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgQGluY2x1ZGUgbWVkaWEtbWluKEREKSB7XG4gICAgICAgIHBhZGRpbmc6ICR3YnUtbWFyZ2luO1xuICAgICAgICBtYXJnaW46ICR3YnUtbWFyZ2luICogMyAwO1xuICAgICAgICB3aWR0aDogYXV0bztcbiAgICAgIH1cbiAgICB9XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHotaW5kZXg6IDI7XG4gICAgLnN2Zy1jbG9zZSB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICBwYWRkaW5nOiAkd2J1LW1hcmdpbiAqIDAuMjtcbiAgICAgIHdpZHRoOiAkd2J1LW1hcmdpbiAqIDEuNTtcbiAgICAgIGhlaWdodDogJHdidS1tYXJnaW4gKiAxLjU7XG4gICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgZmlsbDogIzAwMDtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICM1NTU7XG4gICAgICBsZWZ0OiBhdXRvO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgICBib3R0b206IGF1dG87XG4gICAgICB0b3A6IC0kd2J1LW1hcmdpbiAqIDEuNztcbiAgICAgIEBpbmNsdWRlIFdCVXRyYW5zaXRpb24oKTtcbiAgICAgIEBpbmNsdWRlIG1lZGlhLW1pbihERCkge1xuICAgICAgICByaWdodDogLSR3YnUtbWFyZ2luICogMjtcbiAgICAgICAgdG9wOiAtJHdidS1tYXJnaW4gKiAyO1xuICAgICAgICBwYWRkaW5nOiAkd2J1LW1hcmdpbiAqIDAuNDtcbiAgICAgICAgd2lkdGg6ICR3YnUtbWFyZ2luICogMjtcbiAgICAgICAgaGVpZ2h0OiAkd2J1LW1hcmdpbiAqIDI7XG4gICAgICB9XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgYmFja2dyb3VuZDogI2YwMDtcbiAgICAgICAgZmlsbDogI2ZmZjtcbiAgICAgIH1cbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG4gIH1cbiAgJi5vcGVuIHtcbiAgICB6LWluZGV4OiA5OTk5O1xuICAgIG9wYWNpdHk6IDE7XG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcbiAgICAuaGJrX19jb250YWluZXIge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgIEBpbmNsdWRlIG1lZGlhLW1pbihNRCkge1xuICAgICAgICBoZWlnaHQ6IGF1dG87XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5ib2R5Lm1vZGFsLW9wZW4ge1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgV2J1LUF0b21pcXVlIHZhcmlhYmxlc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgQ09MT1JTXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy9cbi8vIENvdWxldXJzIHByaW5jaXBhbFxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBDb3VsZXVyIHByaW1haXJlICggeSBjb21wcmlzIGxhIGNvdWxldXIgZGUgbGllbnMgcGFyIGRlZmF1dCApLlxuJHdidS1jb2xvci1wcmltYXJ5OiAjYmZkN2VkICFkZWZhdWx0O1xuLy8gQ291bGV1ciBzZWNvbmRhaXJlXG4kd2J1LWNvbG9yLXNlY29uZGFyeTogIzAwNzRiNyAhZGVmYXVsdDtcbi8vIENvdWxldXIgZCdhcnJpw6hyZSBwbGFuICggw6AgcHJpdmlsaWdlciBhdSBuaXZlYXUgZHUgZm9vdGVyLCBkZXMgZWxlbWVudHMgZGUgY292ZXJzICkuXG4kd2J1LWJhY2tncm91bmQ6ICMwMDNiNzMgIWRlZmF1bHQ7XG4vLyBDb3VsZXVycyBzdXBwbGVtZW50YWlyZS5cbiR3YnUtY29sb3ItdGhpcmRseTogIzYwYTNkOSAhZGVmYXVsdDtcbi8vIGNvdWxldXJzIGRlcyBsaWVuc1xuJHdidS1saW5rLWNvbG9yOiAkd2J1LWNvbG9yLXByaW1hcnk7XG4vL1xuLy8gQXV0cmUgY291bGV1cnNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuJHdidS1ib3JkZXItY29sb3I6ICNkZWUyZTYgIWRlZmF1bHQ7XG4kd2J1LWNvbG9yLXRleHQ6ICM0YzRjNGMgIWRlZmF1bHQ7XG4kd2J1LWNvbG9yLXRlYWw6ICM0OWEwYTIgIWRlZmF1bHQ7XG4kd2J1LWNvbG9yLWJvZGVyOiAjZGVlMmU2ICFkZWZhdWx0O1xuJHdidS10aXRsZS1jb2xvcjogaW5oZXJpdCAhZGVmYXVsdDtcblxuLy8gUGVybWV0IGRlIHN1cmNoYXJnZXIgbGEgY291bGV1ciBwcmltYWlyZSAocHJpbWFyeSkgZGUgYm9vdHN0cmFwXG4kd2J1LWJvb3RzdHJhcC1wcmltYXJ5OiAkd2J1LWNvbG9yLXByaW1hcnk7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIEJPUkRVUkVTXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuLy8gYnV0dG9tXG4kd2J1LWJ0bi1ib3JkZXItcm91bmQ6IDUwJSAhZGVmYXVsdDtcbiR3YnUtYnRuLXJvdW5kLWRpbWVuc2lvbjogMi4ycmVtICFkZWZhdWx0O1xuJGJ0bi1ib3JkZXItY29sb3I6ICR3YnUtYm9yZGVyLWNvbG9yICFkZWZhdWx0O1xuJHdidS1idG4tYm9yZGVyLXJhZGl1czogMzBweCAhZGVmYXVsdDtcbiR3YnUtYnRuLXJhZGl1cy1wYWRkaW5nOiAwLjg4cmVtIDEuNXJlbSAhZGVmYXVsdDtcbi8vIGxhcmdldXIgZGUgbGEgcHVjZS5cbiR3YnVfZGltZW5zaW9uX3B1Y2U6IDI1cHggIWRlZmF1bHQ7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIFRZUE9HUkFQSFlcbiBpbCB5YSB1bmUgZXJyZXVyIGRlIGxvZ2lxdWUgZGFucyBsYSBkZWZpbml0aW9uIGRlcyBzb3VzIHRhaWxsZSBkZSBwb2xpY2UuXG4gZWxsZXMgbmUgc29udCBwYXMgcHJvcG9ydGlvbm5lbGxlIMOgIGxhIHRhaWxsZSBwYXJlbnRlLlxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbi8vIGRlZmF1bHRcbiR3YnUtZGVmYXVsdC1saW5lLWhlaWdodDogMS4zICFkZWZhdWx0O1xuJHdidS1kZWZhdWx0LWZvbnQtc2l6ZTogMS42cmVtICFkZWZhdWx0O1xuJHdidS1kZWZhdWx0LWZvbnQtc2l6ZS1zbTogJHdidS1kZWZhdWx0LWZvbnQtc2l6ZSAqIDAuODggIWRlZmF1bHQ7XG4vL1xuJHdidS10aXRsZS1mb250LWZhbWlseTogaW5oZXJpdCAhZGVmYXVsdDtcbiR3YnUtdGl0bGUtZm9udC13ZWlnaHQ6IDYwMCAhZGVmYXVsdDtcbi8vIEJpZyB0ZXh0ICggR2VuZXJhbGVtZW50IHBvdXIgbGVzIHNlY3Rpb25zIGhlcm8gKS5cbiR3YnUtdGl0cmUtc3VwcHJhOiAkd2J1LWRlZmF1bHQtZm9udC1zaXplICogNiAhZGVmYXVsdDsgLy8gOTZweFxuJHdidS10aXRyZS1zdXBwcmEtbTogJHdidS10aXRyZS1zdXBwcmEgKiAwLjg4ICFkZWZhdWx0O1xuJHdidS10aXRyZS1zdXBwcmEtZGQ6ICR3YnUtdGl0cmUtc3VwcHJhICogMC43OSAhZGVmYXVsdDtcbiR3YnUtdGl0cmUtc3VwcHJhLXNtOiAkd2J1LXRpdHJlLXN1cHByYSAqIDAuNjUgIWRlZmF1bHQ7XG4kd2J1LXRpdHJlLXN1cHByYS14czogJHdidS10aXRyZS1zdXBwcmEgKiAwLjQ1ICFkZWZhdWx0O1xuLy9cbiR3YnUtdGl0cmUtYmlnZ2VzdDogJHdidS1kZWZhdWx0LWZvbnQtc2l6ZSAqIDUuNSAhZGVmYXVsdDsgLy8gODhweFxuJHdidS10aXRyZS1iaWdnZXN0LW1kOiAkd2J1LXRpdHJlLWJpZ2dlc3QgKiAwLjggIWRlZmF1bHQ7XG4kd2J1LXRpdHJlLWJpZ2dlc3Qtc206ICR3YnUtdGl0cmUtYmlnZ2VzdCAqIDAuNyAhZGVmYXVsdDtcbi8vXG4kd2J1LXRpdHJlLWJpZzogJHdidS1kZWZhdWx0LWZvbnQtc2l6ZSAqIDQuNCAhZGVmYXVsdDsgLy8gNzAuNHB4XG4kd2J1LXRpdHJlLWJpZy1tZDogJHdidS10aXRyZS1iaWcgKiAwLjggIWRlZmF1bHQ7IC8vNTYucHhcbiR3YnUtdGl0cmUtYmlnLXNtOiAkd2J1LXRpdHJlLWJpZyAqIDAuNyAhZGVmYXVsdDsgLy8gNDkuMjhweFxuLy9oMVxuJHdidS1oMS1mb250LXNpemU6ICR3YnUtZGVmYXVsdC1mb250LXNpemUgKiAzLjUgIWRlZmF1bHQ7IC8vNTZweFxuJHdidS1oMS1mb250LXNpemUtbWQ6ICR3YnUtaDEtZm9udC1zaXplICogMC44ICFkZWZhdWx0OyAvLyA0NC44cHhcbiR3YnUtaDEtZm9udC1zaXplLXNtOiAkd2J1LWgxLWZvbnQtc2l6ZSAqIDAuNyAhZGVmYXVsdDsgLy8zOS4ycHhcbiR3YnUtaDEtbGluZS1oZWlnaHQ6ICR3YnUtZGVmYXVsdC1saW5lLWhlaWdodCAqIDEuNyAhZGVmYXVsdDtcbi8vaDJcbiR3YnUtaDItZm9udC1zaXplOiAkd2J1LWRlZmF1bHQtZm9udC1zaXplICogMi44ICFkZWZhdWx0OyAvLyA0NHB4XG4kd2J1LWgyLWZvbnQtc2l6ZS1zbTogJHdidS1oMi1mb250LXNpemUgKiAwLjc1ICFkZWZhdWx0OyAvLyAzNS4ycHhcbiR3YnUtaDItbGluZS1oZWlnaHQ6ICR3YnUtZGVmYXVsdC1saW5lLWhlaWdodCAqIDEuNSAhZGVmYXVsdDtcbi8vaDNcbiR3YnUtaDMtZm9udC1zaXplOiAkd2J1LWRlZmF1bHQtZm9udC1zaXplICogMi4yICFkZWZhdWx0OyAvLyAzNS4ycHhcbiR3YnUtaDMtZm9udC1zaXplLXNtOiAkd2J1LWgzLWZvbnQtc2l6ZSAqIDAuNzUgIWRlZmF1bHQ7IC8vIDI4LjE2cHhcbiR3YnUtaDMtbGluZS1oZWlnaHQ6ICR3YnUtZGVmYXVsdC1saW5lLWhlaWdodCAqIDEuMyAhZGVmYXVsdDsgLy8gMjguOHB4XG4vL2g0XG4kd2J1LWg0LWZvbnQtc2l6ZTogJHdidS1kZWZhdWx0LWZvbnQtc2l6ZSAqIDEuNSAhZGVmYXVsdDsgLy8gMjRweFxuJHdidS1oNC1saW5lLWhlaWdodDogJHdidS1kZWZhdWx0LWxpbmUtaGVpZ2h0ICogMS4xICFkZWZhdWx0OyAvLyAyOC44cHhcbi8vaDVcbiR3YnUtaDUtZm9udC1zaXplOiAkd2J1LWRlZmF1bHQtZm9udC1zaXplICogMS4yICFkZWZhdWx0OyAvLyAxOS4ycHhcbi8vaDZcbiR3YnUtaDYtZm9udC1zaXplOiAkd2J1LWRlZmF1bHQtZm9udC1zaXplICogMC44OCAhZGVmYXVsdDsgLy8gMTQuMDhweFxuLy8gUG91ciBsZXMgdGl0cmVzICggaDMsIGg0LCBoNSwgaDYgKSBwb3VyIGxlcyBwYyBldCB0ZWxlcGhvbmVzLlxuJHdidS10aXRsZS1mb250LXNpemU6IDEuNnJlbSAhZGVmYXVsdDtcbiR3YnUtdGl0bGUtZm9udC1zaXplLXNtOiAxLjZyZW0gIWRlZmF1bHQ7XG4vL1xuXG4vKiAqL1xuLy8gc3BhY2UuXG4kd2J1LW1hcmdpbjogMnJlbSAhZGVmYXVsdDtcbiR3YnUtcGFkZGluZzogMnJlbSAhZGVmYXVsdDtcbiR3YnUtaDEtbWFyZ2luOiAkd2J1LW1hcmdpbiAqIDAuNzUgIWRlZmF1bHQ7XG4kd2J1LWgyLW1hcmdpbjogJHdidS1tYXJnaW4gKiAwLjYyNSAhZGVmYXVsdDtcbiR3YnUtaDMtbWFyZ2luOiAkd2J1LW1hcmdpbiAqIDAuNTI2ICFkZWZhdWx0O1xuJHdidS1oNC1tYXJnaW46ICR3YnUtbWFyZ2luICogMC40NTQgIWRlZmF1bHQ7XG4vKiBQYWdlLWhlYWRlci1iZyAqL1xuJHdidS1wYWdlLWhlYWRlci1iZzogMjAwcHg7XG4vKiBQZXJtZXQgZGUgc3VyY2hhcmdlciBsZXMgdmFyaWFibGVzIGJvb3RzdHJhcCAqL1xuLy8gYm9vdHN0cmFwIHZhcmlhYmxlc1xuJHdidS1pbnB1dC1mb250LXNpemU6ICR3YnUtZGVmYXVsdC1mb250LXNpemUgIWRlZmF1bHQ7XG4kd2J1LWJ0bi1saW5lLWhlaWdodDogJHdidS1kZWZhdWx0LWZvbnQtc2l6ZSAhZGVmYXVsdDtcbiR3YnUtYnRuLWZvbnQtc2l6ZTogJHdidS1kZWZhdWx0LWZvbnQtc2l6ZSAhZGVmYXVsdDtcbiR3YnUtZm9ybS1ncm91cC1tYXJnaW4tYm90dG9tOiAkd2J1LW1hcmdpbjtcbiR3YnUtYnRuLXBhZGRpbmcteS1zbTogMy40cmVtICFkZWZhdWx0O1xuJHdidS1idG4tcGFkZGluZy14LXNtOiAwLjhyZW0gIWRlZmF1bHQ7XG4kd2J1LWJ0bi1mb250LXNpemUtc206ICR3YnUtZGVmYXVsdC1mb250LXNpemUgKiAwLjc1ICFkZWZhdWx0O1xuLy8gU3BhY2VcbiRzcGFjZV9ib3R0b206ICR3YnUtbWFyZ2luICogMy41O1xuJHNwYWNlX3RvcDogJHdidS1tYXJnaW4gKiAyLjU7XG4kc3BhY2VfaW5uZXJfdG9wOiAkc3BhY2VfdG9wICogMC41O1xuLy8gTWF4IHdpdGggZm9yIHRleHRcbiR3aXRoX3Bob25lOiA2MDBweDtcbiR3aXRoX3RhYmxldDogOTAwcHg7XG4kd2l0aF9jb250YWluZXI6IDEyMDBweDtcbiIsIi8qKlxuICogdmVyc2lvbiAxIDogSnVpbiAyMDIzXG4gKiBwb3VyIHZvaXIgbGVzIHN0YXRzIGQndXRpbGlzYXRpb24gZW4gZm9uY3Rpb24gZGUgbGEgdGFpbGxlIGRlcyBlY3JhbnMgOiBodHRwczovL2dzLnN0YXRjb3VudGVyLmNvbS9zY3JlZW4tcmVzb2x1dGlvbi1zdGF0cy9tb2JpbGUvd29ybGR3aWRlXG4gKi9cbi8vMzYwICgzNjB4ODAwIC4uLilcbiRTXzM2MF9maW46IDM1OXB4OyAvLyBTIDwgMzYwXG4kU18zNjBfZGVidXQ6IDM2MHB4OyAvLyBTID49IDM2MFxuLy80MDAgKDQxMng5MTUsIDQxNHg4OTYgLi4uKVxuJFNfNDAwX2ZpbjogMzk5cHg7IC8vIFMgPCA0MDBcbiRTXzQwMF9kZWJ1dDogNDAwcHg7IC8vIFMgPj0gNDAwXG4vLyBDVVNUT00ga2V5IDogbW9iaWxlXG4vLzU3NSAoYm9vdHN0cmFwIHY1KVxuJFNfNTc1X2ZpbjogNTc0cHg7IC8vIFMgPCA1NzVcbiRTXzU3NV9kZWJ1dDogNTc1cHg7IC8vIFMgPj0gNTc1XG4vLzYwMCAoNjAweDEwMjQsIDYwMXg5NjIgLi4uKVxuJFNfNjAwX2ZpbjogNTk5cHg7IC8vIFMgPCA2MDBcbiRTXzYwMF9kZWJ1dDogNjAwcHg7IC8vIFMgPj0gNjAwXG4vLyBDVVNUT00ga2V5IDogdGFibGV0XG4vLzc2OCAoYm9vdHN0cmFwLCA3Njh4MTAyNCAuLi4pXG4kU183NjhfZmluOiA3NjdweDsgLy8gUyA8IDc2OFxuJFNfNzY4X2RlYnV0OiA3NjhweDsgLy8gUyA+PSA3Njhcbi8vODAwICg4MDB4MTI4MCAuLi4pXG4kU184MDBfZmluOiA3OTlweDsgLy8gUyA8IDgwMFxuJFNfODAwX2RlYnV0OiA4MDBweDsgLy8gUyA+PSA4MDBcbi8vOTkyIChib290c3RyYXAgLi4uKVxuJFNfOTkyX2ZpbjogOTkxcHg7IC8vIFMgPCA5OTJcbiRTXzk5Ml9kZWJ1dDogOTkycHg7IC8vIFMgPj0gOTkyXG4vLzEyMDAgKGJvb3RzdHJhcCAuLi4pXG4kU18xMjAwX2ZpbjogMTE5OXB4OyAvLyBTIDwgMTIwMFxuJFNfMTIwMF9kZWJ1dDogMTIwMHB4OyAvLyBTID49IDEyMDBcbi8vMTI4MCAoMTI4MHg4MDAgLi4uKVxuJFNfMTI4MF9maW46IDEyNzlweDsgLy8gUyA8IDEyODBcbiRTXzEyODBfZGVidXQ6IDEyODBweDsgLy8gUyA+PSAxMjgwXG4vLyBDVVNUT00ga2V5IDogZGVza3RvcFxuLy8xMzY2ICgxMzY2eDc2OCAuLi4pXG4kU18xMzY2X2ZpbjogMTM2NXB4OyAvLyBTIDwgMTM2NlxuJFNfMTM2Nl9kZWJ1dDogMTM2NnB4OyAvLyBTID49IDEzNjZcbi8vMTQwMCAoYm9vdHN0cmFwIC4uLilcbiRTXzE0MDBfZmluOiAxMzk5cHg7IC8vIFMgPCAxNDAwXG4kU18xNDAwX2RlYnV0OiAxNDAwcHg7IC8vIFMgPj0gMTQwMFxuLy8xNTM2ICgxNTM2eDg2NCAuLi4pXG4kU18xNTM2X2ZpbjogMTUzNnB4OyAvLyBTIDwgMTUzNlxuJFNfMTUzNl9kZWJ1dDogMTUzNnB4OyAvLyBTID49IDE1MzZcbi8vMTkyMCAoMTkyMHgxMDgwIC4uLilcbiRTXzE5MjBfZmluOiAxOTE5cHg7IC8vIFMgPCAxOTIwXG4kU18xOTIwX2RlYnV0OiAxOTIwcHg7IC8vIFMgPj0gMTkyMFxuXG4vLyBlbmRcbi8qKlxuICogdmVyc2lvbiAwLlxuICogUmVtb3ZlIGJlZm9yZSAyeFxuICogQGRlcHJlY2lhdGVkIHZhbHVlLlxuICovXG4kWFhfZmluOiA0NDBweDtcbiRYU19kZWJ1dDogNDQxcHg7XG5cbiRYU19maW46IDU3NXB4O1xuJFNNX2RlYnV0OiA1NzZweDtcblxuJFNNX2ZpbjogNzY4cHg7XG4kTURfZGVidXQ6IDc2OXB4O1xuJE1EX2ZpbjogOTkxcHg7XG5cbiRERF9kZWJ1dDogOTkycHg7XG4kRERfZmluOiAxMDI0cHg7XG5cbiRNU19kZWJ1dDogMTAyNXB4O1xuJE1TX2ZpbjogMTIwMHB4O1xuXG4kTV9kZWJ1dDogMTIwMXB4O1xuJE1fZmluOiAxNDUwcHg7XG5cbiRMTV9kZWJ1dDogMTQ1MXB4O1xuJExNX2ZpbjogMTYwMHB4O1xuXG4kTF9kZWJ1dDogMTYwMXB4O1xuJExfZmluOiAxOTIwcHg7XG5cbiRYTF9kZWJ1dDogMTkyMXB4O1xuLy8kWExfZmluOiAyNTAwcHg7XG5cbkBtaXhpbiBtZWRpYS1taW4oJF9rZXk6IGZhbHNlKSB7XG4gIEBpZiAkX2tleSA9PSBcIlhTXCIge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJFhTX2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJTTVwiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRTTV9kZWJ1dCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRfa2V5ID09IFwiTURcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkTURfZGVidXQpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkX2tleSA9PSBcIkREXCIge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJEREX2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJNU1wiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRNU19kZWJ1dCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRfa2V5ID09IFwiTVwiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRNX2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJMTVwiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRMTV9kZWJ1dCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRfa2V5ID09IFwiTFwiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRMX2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJYTFwiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRYTF9kZWJ1dCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRfa2V5ID09IFwiU18zNjBcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU18zNjBfZGVidXQpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkX2tleSA9PSBcIlNfNDAwXCIge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJFNfNDAwX2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJTXzU3NVwiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRTXzU3NV9kZWJ1dCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRfa2V5ID09IFwiU182MDBcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU182MDBfZGVidXQpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkX2tleSA9PSBcIlNfNzY4XCIge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJFNfNzY4X2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJTXzgwMFwiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRTXzgwMF9kZWJ1dCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRfa2V5ID09IFwiU185OTJcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU185OTJfZGVidXQpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkX2tleSA9PSBcIlhMXCIge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJFhMX2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJTXzEyMDBcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU18xMjAwX2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJTXzEyODBcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU18xMjgwX2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJTXzEzNjZcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU18xMzY2X2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJTXzE0MDBcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU18xNDAwX2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJTXzE1MzZcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU18xNTM2X2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJTXzE5MjBcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU18xOTIwX2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbiAgLy8gQ3VzdG9tIGtleVxuICBAZWxzZSBpZiAkX2tleSA9PSBcIm1vYmlsZVwiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6ICRTXzU3NV9kZWJ1dCkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRfa2V5ID09IFwidGFibGV0XCIge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogJFNfNzY4X2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJib290c3RyYXBfbGdcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU185OTJfZGVidXQpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkX2tleSA9PSBcImRlc2t0b3BcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAkU18xMzY2X2RlYnV0KSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBlcnJvciBcIlByb3BlcnR5ICN7JF9rZXl9IGlzIG5vdCBhIHZhbGlkIHZhbHVlLCBzZWUgQGZpbGUgc2Nzcy9kZWZhdXQvbW9kZWwvY3VzdG9tX2JwLnNjc3MgZm9yIG1vcmUgaW5mb3JtYXRpb24uIFwiO1xuICB9XG59XG5cbkBtaXhpbiBtZWRpYS1tYXgoJF9rZXkpIHtcbiAgQGlmICRfa2V5ID09IFwiWFhcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkWFhfZmluKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJTTVwiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRTTV9maW4pIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkX2tleSA9PSBcIlhTXCIge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogJFhTX2Zpbikge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIGlmICRfa2V5ID09IFwiTURcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkTURfZmluKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJERFwiIHtcbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRERF9maW4pIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfSBAZWxzZSBpZiAkX2tleSA9PSBcIk1TXCIge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogJE1TX2Zpbikge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9XG4gIC8vIEN1c3RvbSBrZXlcbiAgQGVsc2UgaWYgJF9rZXkgPT0gXCJtb2JpbGVcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkU181NzVfZmluKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJ0YWJsZXRcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkU183NjhfZmluKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH0gQGVsc2UgaWYgJF9rZXkgPT0gXCJib290c3RyYXBfbGdcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkU185OTJfZmluKSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbiBAZWxzZSBpZiAkX2tleSA9PSBcImRlc2t0b3BcIiB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkU18xMzY2X2Zpbikge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBAZXJyb3IgXCJQcm9wZXJ0eSAjeyRfa2V5fSBpcyBub3QgYSB2YWxpZCB2YWx1ZSwgc2VlIEBmaWxlIHNjc3MvZGVmYXV0L21vZGVsL2N1c3RvbV9icC5zY3NzIGZvciBtb3JlIGluZm9ybWF0aW9uLiBcIjtcbiAgfVxufVxuIiwiQHVzZSBcIi4uL21vZGVsL2N1c3RvbV9icC5zY3NzXCIgYXMgKjtcbkB1c2UgXCIuLi8uLi92YXJpYWJsZXNcIiBhcyAqO1xuXG4vKipcbiAqICBCcmVhY2sgcG9pbnQgaGVyby5cbiAqL1xuQG1peGluIGJwX2hlcm8oKSB7XG4gIGZvbnQtc2l6ZTogJHdidS1oMS1mb250LXNpemUtc207XG4gIEBpbmNsdWRlIG1lZGlhLW1pbihTTSkge1xuICAgIGZvbnQtc2l6ZTogJHdidS10aXRyZS1iaWctc207XG4gIH1cbiAgQGluY2x1ZGUgbWVkaWEtbWluKEREKSB7XG4gICAgZm9udC1zaXplOiAkd2J1LXRpdHJlLWJpZy1tZDtcbiAgfVxuICBAaW5jbHVkZSBtZWRpYS1taW4oTSkge1xuICAgIGZvbnQtc2l6ZTogJHdidS10aXRyZS1iaWc7XG4gIH1cbiAgQGluY2x1ZGUgbWVkaWEtbWluKExNKSB7XG4gICAgZm9udC1zaXplOiAkd2J1LXRpdHJlLWJpZ2dlc3Q7XG4gIH1cbn1cblxuQG1peGluIHdidS10aXRyZS1zdXBwcmEoKSB7XG4gIGZvbnQtc2l6ZTogJHdidS10aXRyZS1zdXBwcmEteHM7XG4gIEBpbmNsdWRlIG1lZGlhLW1pbihTTSkge1xuICAgIGZvbnQtc2l6ZTogJHdidS10aXRyZS1zdXBwcmEtc207XG4gIH1cbiAgQGluY2x1ZGUgbWVkaWEtbWluKEREKSB7XG4gICAgZm9udC1zaXplOiAkd2J1LXRpdHJlLXN1cHByYS1kZDtcbiAgfVxuICBAaW5jbHVkZSBtZWRpYS1taW4oTSkge1xuICAgIGZvbnQtc2l6ZTogJHdidS10aXRyZS1zdXBwcmEtbTtcbiAgfVxuICBAaW5jbHVkZSBtZWRpYS1taW4oTE0pIHtcbiAgICBmb250LXNpemU6ICR3YnUtdGl0cmUtc3VwcHJhO1xuICB9XG59XG5cbi8qKlxuICogIEJyZWFjayBwb2ludCBoMS5cbiAqL1xuQG1peGluIGJwX2gxKCkge1xuICBmb250LXNpemU6ICR3YnUtaDEtZm9udC1zaXplLXNtO1xuICBAaW5jbHVkZSBtZWRpYS1taW4oREQpIHtcbiAgICBmb250LXNpemU6ICR3YnUtaDEtZm9udC1zaXplLW1kO1xuICB9XG4gIEBpbmNsdWRlIG1lZGlhLW1pbihNKSB7XG4gICAgZm9udC1zaXplOiAkd2J1LWgxLWZvbnQtc2l6ZTtcbiAgfVxufVxuXG4vKipcbiAqICBCcmVhY2sgcG9pbnQgaDIuXG4gKi9cbkBtaXhpbiBicF9oMigpIHtcbiAgZm9udC1zaXplOiAkd2J1LWgyLWZvbnQtc2l6ZS1zbTtcbiAgQGluY2x1ZGUgbWVkaWEtbWluKEREKSB7XG4gICAgZm9udC1zaXplOiAkd2J1LWgyLWZvbnQtc2l6ZTtcbiAgfVxufVxuXG4vKipcbiAqICBCcmVhY2sgcG9pbnQgaDMuXG4gKi9cbkBtaXhpbiBicF9oMygpIHtcbiAgZm9udC1zaXplOiAkd2J1LWgzLWZvbnQtc2l6ZS1zbTtcbiAgQGluY2x1ZGUgbWVkaWEtbWluKEREKSB7XG4gICAgZm9udC1zaXplOiAkd2J1LWgzLWZvbnQtc2l6ZTtcbiAgfVxufVxuXG4vKipcbiAqICBCcmVhY2sgcG9pbnQgaDQuXG4gKi9cbkBtaXhpbiBicF9oNCgpIHtcbiAgZm9udC1zaXplOiAkd2J1LWRlZmF1bHQtZm9udC1zaXplO1xuICBAaW5jbHVkZSBtZWRpYS1taW4oREQpIHtcbiAgICBmb250LXNpemU6ICR3YnUtaDQtZm9udC1zaXplO1xuICB9XG59XG5cbi8qKlxuICogIEJyZWFjayBwb2ludCBoNS5cbiAqL1xuQG1peGluIGJwX2g1KCkge1xuICBmb250LXNpemU6ICR3YnUtaDUtZm9udC1zaXplO1xufVxuXG4vKipcbiAqICBCcmVhY2sgcG9pbnQgaDYuXG4gKi9cbkBtaXhpbiBicF9oNigpIHtcbiAgZm9udC1zaXplOiAkd2J1LWg2LWZvbnQtc2l6ZTtcbn1cbiIsIi8qKlxuICogQ2hhcmdlbWVudCBwcm9ncmVzc2lmXG4gKi9cbkBtaXhpbiBsb2FkX3Byb2dyZXNzaXZlX2ltYWdlKCkge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDE7XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBib3R0b206IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgei1pbmRleDogLTE7XG4gICAgZmlsdGVyOiBibHVyKDEwcHgpO1xuICAgIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxMHB4KTtcbiAgICB0cmFuc2l0aW9uOiBhbGwgNDAwbXMsIC13ZWJraXQtYmFja2Ryb3AtZmlsdGVyIDQwMG1zLCAtd2Via2l0LWJhY2tkcm9wLWZpbHRlciA0MDBtcztcbiAgfVxuXG4gICYubGF6eWxvYWRlZDo6YWZ0ZXIge1xuICAgIGZpbHRlcjogbm9uZTtcbiAgICBiYWNrZHJvcC1maWx0ZXI6IG5vbmU7XG4gIH1cbn1cblxuLyoqXG4gKiBBZmZpY2hhZ2UgZGUgbGEgbGFuZ3VlLlxuICogTW9kZWwgc2ltcGxlLlxuICovXG5AbWl4aW4gc2VsZWN0X2xhbmd1ZSgkcGFkZGluZzogMC4zZW0pIHtcbiAgLm5hdi1saW5rIHtcbiAgICBwYWRkaW5nOiAkcGFkZGluZztcbiAgICBjb2xvcjogJHRleHRfbm9ybWFsO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIH1cblxuICAubmF2LWxpbmsuYWN0aXZlLFxuICAubmF2LWxpbmsuaXMtYWN0aXZlIHtcbiAgICBjb2xvcjogJGxpbmtfY29sb3I7XG4gIH1cbn1cblxuLyoqXG4gKlxuICovXG5AbWl4aW4gZWZmZXRfYm91dHRvbigkY29sb3I6ICRjb2xvcjIsICRjb2xvcl9ob3ZlcjogJGNvbG9yMikge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBtYXJnaW4tdG9wOiAxZW07XG4gIG1hcmdpbi1ib3R0b206IDAuOGVtO1xuXG4gIEBpbmNsdWRlIG1lZGlhLW1pbihERCkge1xuICAgIG1hcmdpbi10b3A6IC0zcHg7XG4gICAgcGFkZGluZy1sZWZ0OiAyZW07XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgfVxuXG4gID4gYSB7XG4gICAgcGFkZGluZzogMC45ZW0gMmVtO1xuICAgIGJvcmRlcjogMXB4IHNvbGlkICRjb2xvcjtcbiAgICBib3JkZXItcmFkaXVzOiAyNXB4O1xuICAgIGNvbG9yOiAkY29sb3I7XG4gICAgQGluY2x1ZGUgV0JVdHJhbnNpdGlvbigpO1xuICB9XG5cbiAgJjpob3ZlciB7XG4gICAgPiBhIHtcbiAgICAgIGJvcmRlci1jb2xvcjogJGNvbG9yX2hvdmVyO1xuICAgICAgY29sb3I6ICNmZmZmZmY7XG4gICAgICBiYWNrZ3JvdW5kOiAkY29sb3JfaG92ZXI7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBMYWJlbEFkZFJlcXVpcmVkU3RhcigkY29sb3Jfc3Rhcikge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIipcIjtcbiAgICBwYWRkaW5nOiAwIDAuNWVtO1xuICAgIGNvbG9yOiAkY29sb3Jfc3RhcjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IC0xZW07XG4gICAgZm9udC1zaXplOiAxLjhlbTtcbiAgICB0b3A6IDA7XG4gICAgbGluZS1oZWlnaHQ6IDEuMTtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxufVxuXG5AbWl4aW4gcmVxdWlyZWRGaWVsZEZvcm0oJGNvbG9yX3N0YXI6ICRjb2xvcjEpIHtcbiAgbGFiZWwuZm9ybS1yZXF1aXJlZCB7XG4gICAgQGluY2x1ZGUgTGFiZWxBZGRSZXF1aXJlZFN0YXIoJGNvbG9yX3N0YXIpO1xuICB9XG5cbiAgLmpzLWZvcm0tdHlwZS1jaGVja2JveCB7XG4gICAgaW5wdXQucmVxdWlyZWQgKyBsYWJlbCB7XG4gICAgICBAaW5jbHVkZSBMYWJlbEFkZFJlcXVpcmVkU3RhcigkY29sb3Jfc3Rhcik7XG5cbiAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIGhlaWdodDogMTdweDtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgcmlnaHQ6IC0ycHg7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2FyZCByb3RhdGlvblxuICovXG5AbWl4aW4gY2FyZF9yb3RhdGlvbigkYmFja2dyb3VuZF9iZzogIzNjNTI2NSkge1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1yYWRpdXM6IDA7XG4gIC8vb3ZlcmZsb3c6IGhpZGRlbjtcbiAgQGluY2x1ZGUgcm90YXRlUGVycGVjdGl2ZSgkd2lkdGg6IDI5MnB4LCAkaGVpZ2h0OiA0MDBweCwgJHRpbWU6IDAuNXMpO1xuXG4gIC5jYXJkLWhlYWRlciB7XG4gICAgcGFkZGluZzogMDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBtYXgtaGVpZ2h0OiA0MDBweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgaW1nIHtcbiAgICAgIG1heC13aWR0aDogMzUwcHg7XG4gICAgfVxuICB9XG5cbiAgLmNhcmQtYm9keSB7XG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgfVxuXG4gIC5jYXJkLXRleHQge1xuICAgIHBhZGRpbmctYm90dG9tOiAxLjVlbTtcbiAgfVxufVxuLyoqXG4qIFRyYW5zbGF0aW9uIG9uIGhvdmVyXG4qL1xuQG1peGluIFdCVXRyYW5zaXRpb24oJHByb3ByaWV0ZTogYWxsLCAkdGVtcHM6IDAuM3MsICRzdHlsZTogZWFzZS1pbi1vdXQpIHtcbiAgdHJhbnNpdGlvbi1wcm9wZXJ0eTogJHByb3ByaWV0ZTtcbiAgdHJhbnNpdGlvbi1kdXJhdGlvbjogJHRlbXBzO1xuICB0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogJHN0eWxlO1xufVxuLyoqXG4qIEJlZm9yZSBjb3ZlclxuKi9cbkBtaXhpbiBiZWZvcmVDb3ZlcigkYmdfY29sb3I6IHJnYmEoNSwgMTIsIDI5LCAwLjQpLCAkemluZGV4OiAwKSB7XG4gIHotaW5kZXg6IDI7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAmOjpiZWZvcmUge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICRiZ19jb2xvcjtcbiAgICB6LWluZGV4OiAkemluZGV4O1xuICAgIHJpZ2h0OiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBsZWZ0OiAwO1xuICAgIHRvcDogMDtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgY29udGVudDogXCJcIjtcbiAgfVxufVxuLyoqXG4qIEJlZm9yZSBjb3ZlclxuKi9cbkBtaXhpbiBhZnRlckNvdmVyKCRiZ19jb2xvcjogcmdiYSg1LCAxMiwgMjksIDAuNCkpIHtcbiAgei1pbmRleDogMjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuXG4gICY6OmFmdGVyIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmdfY29sb3I7XG4gICAgei1pbmRleDogMDtcbiAgICByaWdodDogMDtcbiAgICBib3R0b206IDA7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgbGVmdDogMDtcbiAgICB0b3A6IDA7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gIH1cbn1cbi8qKlxuICogIHBhcyBkZSByZXRvdXIgw6AgbGEgbGlnbmVcbiAqL1xuQG1peGluIG5vdGJhY2tsaW5lKCR3aWR0aDogMTAwcHgpIHtcbiAgaGVpZ2h0OiBhdXRvO1xuICB3aWR0aDogJHdpZHRoO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbn1cbi8qKlxuICogIE1peGluIGZvciBtdWx0aWxpbmUgbGltaXQgdGV4dCBjc3NcbiAqIEBkZXByZWNpYXRlZCBtb3ZlIGJlZm9yZSAyeCwgXG4gKiBAdXNlIGVsbGlwc2VUZXh0XG4gKi9cbkBtaXhpbiBtdWx0aUxpbmVFbGxpcHNpcygkbGluZUhlaWdodDogMS4yZW0sICRsaW5lQ291bnQ6IDEsICRiZ0NvbG9yOiB3aGl0ZSwgJHRleHQtYWxpZ246IGxlZnQsICRvcGFjaXR5OiAwLjUsICRlbGxpcHNpcy1tYXJnaW4tcmlnaHQ6IDApIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgbGluZS1oZWlnaHQ6ICRsaW5lSGVpZ2h0O1xuICBtYXgtaGVpZ2h0OiAkbGluZUhlaWdodCAqICRsaW5lQ291bnQ7XG4gIHRleHQtYWxpZ246ICR0ZXh0LWFsaWduO1xuICBtYXJnaW4tcmlnaHQ6IC0wLjVlbTtcbiAgcGFkZGluZy1yaWdodDogMC41ZW07XG4gIHdvcmQtYnJlYWs6IGJyZWFrLWFsbDtcbiAgJG11bHRpTGluZUVsbGlwc2lzX2JlZm9yZTogJGxpbmVIZWlnaHQgKiAkbGluZUNvdW50O1xuXG4gICY6YmVmb3JlIHtcbiAgICBjb250ZW50OiBcIi4uLlwiO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogMDtcbiAgICB0b3A6IC0xZW07XG4gICAgb3BhY2l0eTogJG9wYWNpdHk7XG4gICAgei1pbmRleDogMTtcbiAgICB3aWR0aDogMWVtO1xuICAgIGhlaWdodDogMWVtO1xuICAgIG1hcmdpbi1yaWdodDogJGVsbGlwc2lzLW1hcmdpbi1yaWdodDtcbiAgICBtYXJnaW4tdG9wOiBjYWxjKCN7JG11bHRpTGluZUVsbGlwc2lzX2JlZm9yZX0gLSAxcHgpO1xuICB9XG5cbiAgJjphZnRlciB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IDA7XG4gICAgdG9wOiAtMWVtO1xuICAgIHdpZHRoOiAxZW07XG4gICAgaGVpZ2h0OiAxZW07XG4gICAgbWFyZ2luLXRvcDogJGxpbmVIZWlnaHQgKiAkbGluZUNvdW50O1xuICAgIGJhY2tncm91bmQ6ICRiZ0NvbG9yO1xuICAgIG1hcmdpbi1yaWdodDogJGVsbGlwc2lzLW1hcmdpbi1yaWdodDtcbiAgfVxufVxuXG4vKipcbiAqIFBlcm1ldCBkZSBkZWZpbmlyIGxlIG5vbWJyZSBkZSBsaWduZSBtYXggYSBhZmZpY2hlclxuICovXG5AbWl4aW4gZWxsaXBzZVRleHQoJGxpZ25lOiAyKSB7XG4gIGRpc3BsYXk6IC13ZWJraXQtYm94O1xuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xuICAtd2Via2l0LWxpbmUtY2xhbXA6ICRsaWduZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuQG1peGluIGNvdmVyLWxpbmsoKSB7XG4gICY6OmJlZm9yZSB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGxlZnQ6IDA7XG4gICAgdG9wOiAwO1xuICB9XG59XG5cbi8vaHR0cHM6Ly9jb2RlcGVuLmlvL3dhYmVzaGV3L3Blbi9YZGJCZE1cbkBtaXhpbiB3YWl0aW5nYm91bGUoKSB7XG4gICR3aWR0aDogMTVweDtcbiAgJGhlaWdodDogMTVweDtcbiAgJGJvdW5jZV9oZWlnaHQ6IDMwcHg7XG5cbiAgLmJvdW5jZWJhbGwge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgaGVpZ2h0OiAzN3B4O1xuICAgIHdpZHRoOiAkd2lkdGg7XG5cbiAgICAmOmJlZm9yZSB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBjb250ZW50OiBcIlwiO1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICB0b3A6IDA7XG4gICAgICB3aWR0aDogJHdpZHRoO1xuICAgICAgaGVpZ2h0OiAkaGVpZ2h0O1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZiYWUxNztcbiAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDUwJTtcbiAgICAgIGFuaW1hdGlvbjogYm91bmNlIDUwMG1zIGFsdGVybmF0ZSBpbmZpbml0ZSBlYXNlO1xuICAgIH1cbiAgfVxuICBAa2V5ZnJhbWVzIGJvdW5jZSB7XG4gICAgMCUge1xuICAgICAgdG9wOiAkYm91bmNlX2hlaWdodDtcbiAgICAgIGhlaWdodDogNXB4O1xuICAgICAgYm9yZGVyLXJhZGl1czogNjBweCA2MHB4IDIwcHggMjBweDtcbiAgICAgIHRyYW5zZm9ybTogc2NhbGVYKDIpO1xuICAgIH1cblxuICAgIDM1JSB7XG4gICAgICBoZWlnaHQ6ICRoZWlnaHQ7XG4gICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICB0cmFuc2Zvcm06IHNjYWxlWCgxKTtcbiAgICB9XG5cbiAgICAxMDAlIHtcbiAgICAgIHRvcDogMDtcbiAgICB9XG4gIH1cbn1cbi8qIVxuICogLmxpc3QtZWxlbWVudHtAaW5jbHVkZSBsaXN0LWVsZW1lbnQoKCRwYWRkaW5nWToxMHB4LCAkcGFkZGluZ1g6NXB4LCAkYm9yZGVyVzoxcHgpKTt9XG4gKi9cbkBtaXhpbiBsaXN0LWVsZW1lbnQoJHBhZGRpbmdUOiAxMHB4LCAkcGFkZGluZ0I6IDEwcHgsICRwYWRkaW5nTDogNXB4LCAkcGFkZGluZ1I6IDVweCwgJGJvcmRlclc6IDFweCkge1xuICBtYXJnaW46IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7XG4gIG1heC13aWR0aDogNjAwcHg7XG5cbiAgbGkge1xuICAgIHBhZGRpbmc6ICRwYWRkaW5nVCAkcGFkZGluZ1IgJHBhZGRpbmdCICRwYWRkaW5nTDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG1hcmdpbjogMDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYm9yZGVyLWJvdHRvbTogJGJvcmRlclcgc29saWQgJGJvcmRlci1jb2xvcjtcblxuICAgID4gKjpmaXJzdC1jaGlsZCB7XG4gICAgICBtaW4td2lkdGg6IGF1dG87XG4gICAgfVxuXG4gICAgPiAqOmZpcnN0LWNoaWxkICsgKiB7XG4gICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICAgIG1pbi13aWR0aDogNTBweDtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogIEltYWdlcyBhcmVhIHRvIHByZWxvYWQsXG4gKiAgb24gYWpvdXRlIHN1ciBsYSBkaXYgY29udGVuYW50IGwnaW1hZ2VcbiAqL1xuQG1peGluIGltYWdlLWRwYWNlLXByZWxvYWQoJHNwYWNlOiA3MCUpIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuXG4gIGltZyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICB9XG5cbiAgJjo6YmVmb3JlIHtcbiAgICBjb250ZW50OiBcIlwiO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHBhZGRpbmctYm90dG9tOiAkc3BhY2U7XG4gIH1cbn1cbi8qKlxuICpcbiAqL1xuQG1peGluIGxpbmVhci1ncmFkaWVudCgkc3RhcnQtY29sb3I6ICM5MjkwOTAsICRlbmQtY29sb3I6ICNlMmUyZTIsICRvcmllbnRhdGlvbjogXCJ2ZXJ0aWNhbFwiKSB7XG4gIGJhY2tncm91bmQ6ICRzdGFydC1jb2xvcjtcblxuICBAaWYgJG9yaWVudGF0aW9uPT0gXCJ2ZXJ0aWNhbFwiIHtcbiAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0b3AsICRzdGFydC1jb2xvciwgJGVuZC1jb2xvcik7XG4gICAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgJHN0YXJ0LWNvbG9yLCAkZW5kLWNvbG9yKTtcbiAgfSBAZWxzZSBpZiAkb3JpZW50YXRpb249PSBcImhvcml6b250YWxcIiB7XG4gICAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQobGVmdCwgJHN0YXJ0LWNvbG9yLCAkZW5kLWNvbG9yKTtcbiAgICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICRzdGFydC1jb2xvciwgJGVuZC1jb2xvcik7XG4gIH0gQGVsc2Uge1xuICAgIGJhY2tncm91bmQ6IC13ZWJraXQtcmFkaWFsLWdyYWRpZW50KGNlbnRlciwgZWxsaXBzZSBjb3ZlciwgJHN0YXJ0LWNvbG9yLCAkZW5kLWNvbG9yKTtcbiAgICBiYWNrZ3JvdW5kOiByYWRpYWwtZ3JhZGllbnQoZWxsaXBzZSBhdCBjZW50ZXIsICRzdGFydC1jb2xvciwgJGVuZC1jb2xvcik7XG4gIH1cbn1cbi8qKlxuICogQWZmZXQgT21icmVcbiAqL1xuQG1peGluIG9tYnJlKCRzdGFydC1jb2xvcjogI2IxYjBiMCwgJGVuZC1jb2xvcjogI2ZmZmNmYykge1xuICBAaW5jbHVkZSBsaW5lYXItZ3JhZGllbnQoJHN0YXJ0LWNvbG9yLCAkZW5kLWNvbG9yLCAkb3JpZW50YXRpb246IFwidmVydGljYWxcIik7XG59XG5AbWl4aW4gcm9yYXRpb25ibG9jaygpIHtcbiAgd2lkdGg6IDQwMHB4O1xuICBoZWlnaHQ6IDQwMHB4O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgY29sb3I6ICNmZmY7XG4gIC13ZWJraXQtcGVyc3BlY3RpdmU6IDYwMHB4O1xuICBwZXJzcGVjdGl2ZTogNjAwcHg7XG5cbiAgLmZhY2UtYXZhbnQge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBiYWNrZ3JvdW5kOiAjZjAwO1xuICAgIGJvdHRvbTogMDtcbiAgICByaWdodDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICB0cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkO1xuICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICAtd2Via2l0LXRyYW5zZm9ybS1zdHlsZTogcHJlc2VydmUtM2Q7XG4gICAgLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgdHJhbnNpdGlvbjogMC44cztcbiAgfVxuXG4gIC5mYWNlLWFycmllcmUge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBiYWNrZ3JvdW5kOiAjMDBmO1xuICAgIGJvdHRvbTogMDtcbiAgICByaWdodDogMDtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgdHJhbnNmb3JtLXN0eWxlOiBwcmVzZXJ2ZS0zZDtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZXkoLTE4MGRlZyk7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm0tc3R5bGU6IHByZXNlcnZlLTNkO1xuICAgIC13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTogaGlkZGVuO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGV5KC0xODBkZWcpO1xuICAgIHRyYW5zaXRpb246IDAuOHM7XG4gIH1cblxuICAmOmhvdmVyIHtcbiAgICAuZmFjZS1hcnJpZXJlIHtcbiAgICAgIHRyYW5zZm9ybTogcm90YXRleSgwKTtcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGV5KDApO1xuICAgIH1cblxuICAgIC5mYWNlLWF2YW50IHtcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGV5KDE4MGRlZyk7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZXkoMTgwZGVnKTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogUHJpY2VsaXN0XG4gKi9cbkBtaXhpbiBwcmljZUxpc3QoJGJhY2tncm91bmRfYmc6ICMzYzUyNjUpIHtcbiAgcGFkZGluZy10b3A6IDQwcHg7XG4gIG1hcmdpbi1sZWZ0OiAxNXB4O1xuICBtYXJnaW4tcmlnaHQ6IDE1cHg7XG4gIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gIG1heC13aWR0aDogMzUwcHg7XG4gIHdpZHRoOiAxMDAlO1xuXG4gIC5jYXJkLWhlYWRlciB7XG4gICAgYmFja2dyb3VuZDogJGJhY2tncm91bmRfYmc7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHotaW5kZXg6IDA7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgbWluLWhlaWdodDogOTBweDtcbiAgICBmb250LXNpemU6IDAuN2VtO1xuICAgIEBpbmNsdWRlIG1lZGlhLW1pbihYUykge1xuICAgICAgbWluLWhlaWdodDogMTE1cHg7XG4gICAgICBmb250LXNpemU6IDFlbTtcbiAgICB9XG5cbiAgICBzdmcge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwO1xuICAgICAgcmlnaHQ6IC0xOXB4OyAvLy0yOHB4O1xuICAgICAgYm90dG9tOiAwO1xuICAgICAgaGVpZ2h0OiAxMjYlO1xuICAgICAgd2lkdGg6IDExMCU7IC8vMTE0JTtcbiAgICAgIHotaW5kZXg6IC0xO1xuICAgICAgYm9yZGVyLXJhZGl1czogOHB4IDAgMCAwO1xuICAgICAgbWF4LXdpZHRoOiA2MDBweDtcblxuICAgICAgPiBwYXRoIHtcbiAgICAgICAgZmlsbDogJGJhY2tncm91bmRfYmc7XG4gICAgICAgIHN0cm9rZTogJGJhY2tncm91bmRfYmc7XG4gICAgICAgIHN0cm9rZS13aWR0aDogMDtcbiAgICAgICAgc3Ryb2tlLWxpbmVqb2luOiByb3VuZDtcbiAgICAgIH1cblxuICAgICAgPiBwYXRoLm9tYnJlLWxlZnQge1xuICAgICAgICBmaWxsOiBkYXJrZW4oJGJhY2tncm91bmRfYmcsIDcpO1xuICAgICAgICBzdHJva2U6IGRhcmtlbigkYmFja2dyb3VuZF9iZywgNyk7XG4gICAgICAgIGQ6IHBhdGgoXCJNIDAsODAgTCAyMCw3OSBMIDEwLDEwMFwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAudGl0bGUtc21hbGwge1xuICAgICAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxMDAlO1xuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgIGNvbG9yOiAjZmZmO1xuICAgIH1cblxuICAgIC50aXRsZSB7XG4gICAgICBmb250LXdlaWdodDogMzAwO1xuICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIGxpbmUtaGVpZ2h0OiAxMDAlO1xuICAgICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICAgICAgY29sb3I6ICNmZmY7XG4gICAgfVxuICB9XG5cbiAgLmNhcmQtYm9keSB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHotaW5kZXg6IDE7XG4gICAgYmFja2dyb3VuZDogI2ZmZjtcbiAgICBwYWRkaW5nOiAyZW0gMC44cmVtIDAuOHJlbTtcbiAgICBAaW5jbHVkZSBtZWRpYS1taW4oWFMpIHtcbiAgICAgIHBhZGRpbmc6IDJlbSAxLjI1cmVtIDEuMjVyZW07XG4gICAgfVxuXG4gICAgJjo6YmVmb3JlIHtcbiAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogNnB4O1xuICAgICAgYmFja2dyb3VuZDogI2UyZTJlMjtcbiAgICAgIEBpbmNsdWRlIG9tYnJlKCk7XG4gICAgICB0b3A6IDA7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIH1cbiAgfVxuXG4gIC5ib2R5LWhlYWRlciB7XG4gICAgcGFkZGluZy1sZWZ0OiAxZW07XG4gICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICRiYWNrZ3JvdW5kX2JnO1xuICAgIG1hcmdpbi1ib3R0b206IDMwcHg7XG4gIH1cblxuICAuY2FyZC10aXRsZS5wcmljZSxcbiAgLmNhcmQtdGl0bGUucHJpY2UtcHJvbW8ge1xuICAgIGZvbnQtc2l6ZTogMi4yZW07XG4gICAgbGluZS1oZWlnaHQ6IDEwMCU7XG4gICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgICBtYXJnaW4tYm90dG9tOiAwLjZyZW07XG4gIH1cblxuICAuY2FyZC10aXRsZS5wcmljZS5iYXJyZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMTBweDtcbiAgICByaWdodDogMS4yNXJlbTtcbiAgICBmb250LXNpemU6IDEuMmVtO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xuICAgIGNvbG9yOiAjZjU1MDRiO1xuICB9XG5cbiAgLmNhcmQtdGl0bGUucHJpY2Utc3VmZml4IHtcbiAgICBmb250LXNpemU6IDAuOGVtO1xuICAgIGxpbmUtaGVpZ2h0OiAxMDAlO1xuICAgIHBhZGRpbmctbGVmdDogNHB4O1xuICB9XG5cbiAgLmxpc3Qge1xuICAgIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gICAgbGluZS1oZWlnaHQ6IDEuM2VtO1xuICAgIGZvbnQtc2l6ZTogMC45ZW07XG5cbiAgICAuaWNvbmUge1xuICAgICAgcGFkZGluZy1yaWdodDogMTBweDtcblxuICAgICAgaSB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMnB4KTtcbiAgICAgIH1cblxuICAgICAgaS5hY3RpdmUge1xuICAgICAgICBjb2xvcjogbGlnaHRlbigkY29sb3I6ICRiYWNrZ3JvdW5kX2JnLCAkYW1vdW50OiAxMCk7XG4gICAgICB9XG5cbiAgICAgIGkuZGlzYWJsZSB7XG4gICAgICAgIGNvbG9yOiAjYzEyZjJmO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5leHBsaWNhdGlvbiB7XG4gICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgIH1cbiAgfVxuXG4gIC5idG4ge1xuICAgIGNvbG9yOiAkYmFja2dyb3VuZF9iZztcbiAgICBib3JkZXItY29sb3I6ICRiYWNrZ3JvdW5kX2JnO1xuICB9XG5cbiAgLmJ0bjpob3ZlciB7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogc2F0dXJhdGUoJGNvbG9yOiAkYmFja2dyb3VuZF9iZywgJGFtb3VudDogMjUlKTtcbiAgICBib3JkZXItY29sb3I6IHNhdHVyYXRlKCRjb2xvcjogJGJhY2tncm91bmRfYmcsICRhbW91bnQ6IDI1JSk7XG4gIH1cblxuICAuYnRuLmZvY3VzLFxuICAuYnRuOmZvY3VzIHtcbiAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gcmdiYSgkYmFja2dyb3VuZF9iZywgMC41KTtcbiAgfVxuXG4gIC5hY3Rpb25zIHtcbiAgICBib3JkZXItdG9wOiAxcHggc29saWQgJGJhY2tncm91bmRfYmc7XG4gICAgbWFyZ2luLXRvcDogMWVtO1xuICAgIHBhZGRpbmctdG9wOiAxLjVlbTtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgQGluY2x1ZGUgb21icmUoJHN0YXJ0LWNvbG9yOiAjYjFiMGIwLCAkZW5kLWNvbG9yOiAjZmZmY2ZjKTtcbiAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICB0b3A6IDA7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgICBib3R0b206IGF1dG87XG4gICAgICBoZWlnaHQ6IDJweDtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHRyYWl0Qm90dG9tKCR3YnUtbWFyZ2luLCAkd2J1LWJvcmRlci1jb2xvciwgJHdidS13aWR0aDogNDBweCwgJHdidS1tYXJnaW4tbGVmdDogYXV0bykge1xuICAmOjphZnRlciB7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBtYXJnaW4tdG9wOiAkd2J1LW1hcmdpbiAqIDAuODtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2J1LWJvcmRlci1jb2xvcjtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW4tbGVmdDogJHdidS1tYXJnaW4tbGVmdDtcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XG4gICAgd2lkdGg6ICR3YnUtd2lkdGg7XG4gICAgaGVpZ2h0OiAycHg7XG4gIH1cbn1cblxuQG1peGluIGFkZFR3b1BvaW50QWZ0ZXJMYWJlbCgpIHtcbiAgJjo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiOlwiO1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICBwYWRkaW5nOiAwIDJweDtcbiAgfVxufVxuIiwiQGZvcndhcmQgXCIuL21peGlucy9fd2J1X21peGlucy5zY3NzXCI7XG5AZm9yd2FyZCBcIi4vZGVmYXV0L21vZGVsL2N1c3RvbV9icC5zY3NzXCI7XG5AZm9yd2FyZCBcIi4vZGVmYXV0L21peGlucy90eXBvZ3JhcGh5LnNjc3NcIjtcbkBmb3J3YXJkIFwiLi9kZWZhdXQvbWl4aW5zL2NvbXBvbmVudHMuc2Nzc1wiO1xuLy8gc2UgcmFzc3VyZXIgcXVlIGxhIHN1cmNoYWdlIGJvb3RzdHJhcCBmdW5jdGlvbm5lLCBzaW5vbiwgb24gY3JlZSB1biBhdXRyZSBmaWNoaWVyLlxuQGltcG9ydCBcImJvb3RzdHJhcC9zY3NzL2Z1bmN0aW9uc1wiO1xuQGltcG9ydCBcImJvb3RzdHJhcC9zY3NzL3ZhcmlhYmxlc1wiO1xuXG4vKipcbiAqIE9uIGEgdW4gYnVnIGF2ZWMgbGEgZm9uY3Rpb24gY29sb3IteWlxIMOgIHBhcnRpciBkZSBsYSB2ZXJzaW9uIGJvb3RzdHJhcDUsIFxuICogYm9yZGVyLWNvbG9yOiByZ2JhKGNvbG9yLXlpcSgkd2J1LWJhY2tncm91bmQpLCAyMCUpOyBuZSBmb25jdGlvbm5lIHBhcy5cbiAqICggcmFpc29uIGNldHRlIGZvbmN0aW9uIGVzdCByZXByZXNzaWVyICwgaWwgZmF1dCB1dGlsaXNlciBjb2xvci1jb250cmFzdCgpICkuXG4gKi9cbi8vIE9uIG1hc3F1ZSBjZXR0ZSBmb25jdGlvbiBjYXIgbGUgY2FsY3VsIG4nZXN0IHBhcyBhc3NleiBleGFjdC5cbi8vIEBmdW5jdGlvbiBjb2xvci15aXEoJGNvbG9yKSB7XG4vLyAgICRyZXN1bHQ6IGludmVydCgkY29sb3IpO1xuLy8gICAkbGlnaHRuZXNzOiBsaWdodG5lc3MoJHJlc3VsdCk7XG4vLyAgIEBpZiAoJGxpZ2h0bmVzcyA8IDUwKSB7XG4vLyAgICAgJHJlc3VsdDogYmxhY2s7XG4vLyAgIH1cbi8vICAgQHJldHVybiAkcmVzdWx0O1xuLy8gfVxuQGZ1bmN0aW9uIGNvbG9yLXlpcSgkY29sb3IpIHtcbiAgQHJldHVybiBjb2xvci1jb250cmFzdCgkY29sb3IpO1xufVxuIiwiQHVzZSBcIkBzdGVwaGFuZTg4OC93YnUtYXRvbWlxdWUvc2Nzcy93YnUtcmVzc291cmNlcy1jbGVhbi5zY3NzXCIgYXMgKjtcbkB1c2UgXCJAc3RlcGhhbmU4ODgvd2J1LWF0b21pcXVlL3Njc3MvbGlicmFyaWVzL19pbmxpbmUtc3ZnLnNjc3NcIiBhcyAqO1xuJHN2Z19lZGl0OiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgZmlsbD1cIiN7JHdidS1iYWNrZ3JvdW5kfVwiIHdpZHRoPVwiMXJlbVwiIGhlaWdodD1cIjFyZW1cIiB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIj48cGF0aCBkPVwiTTM2Mi43IDE5LjNMMzE0LjMgNjcuNyA0NDQuMyAxOTcuN2w0OC40LTQ4LjRjMjUtMjUgMjUtNjUuNSAwLTkwLjVMNDUzLjMgMTkuM2MtMjUtMjUtNjUuNS0yNS05MC41IDB6bS03MSA3MUw1OC42IDMyMy41Yy0xMC40IDEwLjQtMTggMjMuMy0yMi4yIDM3LjRMMSA0ODEuMkMtMS41IDQ4OS43IC44IDQ5OC44IDcgNTA1czE1LjMgOC41IDIzLjcgNi4xbDEyMC4zLTM1LjRjMTQuMS00LjIgMjctMTEuOCAzNy40LTIyLjJMNDIxLjcgMjIwLjMgMjkxLjcgOTAuM3pcIi8+PC9zdmc+Jztcbi5oYmtjb2xpc3NpbW9jaHJvbm8tcGlja3VwLWVkaXQge1xuICBmb250LXNpemU6IDgwJTtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nOiAkd2J1LW1hcmdpbiAqIDAuMzU7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNmNzk4Mzk7XG4gIGJvcmRlci1sZWZ0LXdpZHRoOiAzcHg7XG4gIC8vIEBpbmNsdWRlIGJhY2tncm91bmQtc3ZnKCRzdmdfZWRpdCk7XG4gIC8vIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gIC8vIGJhY2tncm91bmQtcG9zaXRpb246IDkyJSBjZW50ZXI7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIC5waWNrdXAtaHRtbCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIHotaW5kZXg6IDE7XG4gICAgJjo6YmVmb3JlIHtcbiAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcImh0dHBzOi8vd3d3LmNvbGlzc2ltby5lbnRyZXByaXNlLmxhcG9zdGUuZnIvc2l0ZXMvZGVmYXVsdC9maWxlcy8yMDIxLTAzL0N1YmVfY2FydG9ncmFwaGllX3BvaW50c19yZXRyYWl0c182MHB4LnBuZ1wiKTtcbiAgICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICBib3R0b206IDA7XG4gICAgICB0b3A6IDA7XG4gICAgICByaWdodDogMDtcbiAgICAgIHotaW5kZXg6IC0xO1xuICAgICAgb3BhY2l0eTogMC4zO1xuICAgICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IDkwJSBjZW50ZXI7XG4gICAgICBiYWNrZ3JvdW5kLXNpemU6IGF1dG8gNTAlO1xuICAgICAgQGluY2x1ZGUgV0JVdHJhbnNpdGlvbigpO1xuICAgIH1cbiAgfVxuICAuaGJrY29saXNzaW1vY2hyb25vLXBpY2t1cC1idXR0b24ge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBib3R0b206IDA7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIHRleHQtaW5kZW50OiA5MDBweDtcbiAgfVxuICAmOmhvdmVyIHtcbiAgICAucGlja3VwLWh0bWw6OmJlZm9yZSB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgICAgYmFja2dyb3VuZC1zaXplOiBhdXRvIDYwJTtcbiAgICB9XG4gIH1cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==*/