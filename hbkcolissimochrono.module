<?php
use Drupal\hbkcolissimochrono\Plugin\Commerce\CheckoutPane\ShippingInformationHbkcolissimochrono;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;

/**
 *
 * @file
 * Primary module hooks for hbk colissimo chrono module.
 */

/**
 * implement hook_entity_base_field_info
 *
 * @param EntityTypeInterface $entity_type
 */
function hbkcolissimochrono_entity_base_field_info(EntityTypeInterface $entity_type) {
  $fields = [];
  if ($entity_type->id() == 'commerce_shipment') {
    /**
     * Pour sauvegarder les donnÃ©es colissimo.
     */
    $fields["hbkcolissimochrono_pickup"] = BaseFieldDefinition::create('text_long')->setLabel(" Colissimo pickup ")->setDisplayOptions('form', [])->setDisplayOptions('view',
      [
        'label' => 'hidden',
        'type' => 'hbkcoliickup_formatter',
        'weight' => 0
      ])->setDisplayConfigurable('view', TRUE)->setDisplayConfigurable('form', true);
  }
  return $fields;
}

/**
 * implement hook_commerce_checkout_pane_info_alter
 * ( Cela permet de remplacer les classes par defaut ).
 */
function hbkcolissimochrono_commerce_checkout_pane_info_alter(&$definitions) {
  if (!empty($definitions['shipping_information']['class']) && $definitions['shipping_information']['provider'] == 'commerce_shipping') {
    $definitions['shipping_information']['class'] = ShippingInformationHbkcolissimochrono::class;
  }
}

/**
 * implement hook_theme
 *
 * @param string $existing
 * @param string $type
 * @param string $theme
 * @param string $path
 */
function hbkcolissimochrono_theme($existing, $type, $theme, $path): array {
  return [
    'hbketiquetecolisimo' => [
      'render element' => 'elements'
    ],
    'hbkcolissimochrono_pickup' => [
      'variables' => [
        'settings' => [],
        'address' => [],
        'attributes' => NULL
      ]
    ]
  ];
}

/**
 * Prepares variables for etiquette colissimo templates.
 *
 * Default template: hbketiquetecolisimo.html.twig.
 *
 * @param array $variables
 *        An associative array containing:
 *        - elements: An associative array containing the etiquette colissimo
 *        information and any
 *        fields attached to the entity.
 *        - attributes: HTML attributes for the containing element.
 */
function template_preprocess_hbketiquetecolisimo(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function hbkcolissimochrono_user_cancel($edit, UserInterface $account, $method): void {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish etiquette colissimos.
      $storage = \Drupal::entityTypeManager()->getStorage('hbketiquetecolisimo');
      $hbketiquetecolisimo_ids = $storage->getQuery()->condition('uid', $account->id())->condition('status', 1)->accessCheck(FALSE)->execute();
      foreach ($storage->loadMultiple($hbketiquetecolisimo_ids) as $hbketiquetecolisimo) {
        $hbketiquetecolisimo->set('status', FALSE)->save();
      }
      break;
    
    case 'user_cancel_reassign':
      // Anonymize etiquette colissimos.
      $storage = \Drupal::entityTypeManager()->getStorage('hbketiquetecolisimo');
      $hbketiquetecolisimo_ids = $storage->getQuery()->condition('uid', $account->id())->accessCheck(FALSE)->execute();
      foreach ($storage->loadMultiple($hbketiquetecolisimo_ids) as $hbketiquetecolisimo) {
        $hbketiquetecolisimo->setOwnerId(0)->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function hbkcolissimochrono_user_predelete(UserInterface $account): void {
  // Delete etiquette colissimos that belong to this account.
  $storage = \Drupal::entityTypeManager()->getStorage('hbketiquetecolisimo');
  $hbketiquetecolisimo_ids = $storage->getQuery()->condition('uid', $account->id())->accessCheck(FALSE)->execute();
  $storage->delete($storage->loadMultiple($hbketiquetecolisimo_ids));
  // Delete old revisions.
  $hbketiquetecolisimo_ids = $storage->getQuery()->allRevisions()->condition('uid', $account->id())->accessCheck(FALSE)->execute();
  foreach (array_keys($hbketiquetecolisimo_ids) as $revision_id) {
    $storage->deleteRevision($revision_id);
  }
}
